// Code generated by MockGen. DO NOT EDIT.
// Source: ../system/addr.go

// Package mock_system is a generated GoMock package.
package mock_system

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAddr is a mock of Addr interface
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockAddr) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockAddrMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockAddr)(nil).Address))
}

// Exists mocks base method
func (m *MockAddr) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockAddrMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAddr)(nil).Exists))
}

// Reachable mocks base method
func (m *MockAddr) Reachable() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reachable")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reachable indicates an expected call of Reachable
func (mr *MockAddrMockRecorder) Reachable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reachable", reflect.TypeOf((*MockAddr)(nil).Reachable))
}
