// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mock_system is a generated GoMock package.
package mock_system

import (
	system "github.com/SimonBaeumer/goss/system"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockHTTP is a mock of HTTP interface
type MockHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMockRecorder
}

// MockHTTPMockRecorder is the mock recorder for MockHTTP
type MockHTTPMockRecorder struct {
	mock *MockHTTP
}

// NewMockHTTP creates a new mock instance
func NewMockHTTP(ctrl *gomock.Controller) *MockHTTP {
	mock := &MockHTTP{ctrl: ctrl}
	mock.recorder = &MockHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTP) EXPECT() *MockHTTPMockRecorder {
	return m.recorder
}

// HTTP mocks base method
func (m *MockHTTP) HTTP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTP")
	ret0, _ := ret[0].(string)
	return ret0
}

// HTTP indicates an expected call of HTTP
func (mr *MockHTTPMockRecorder) HTTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTP", reflect.TypeOf((*MockHTTP)(nil).HTTP))
}

// Status mocks base method
func (m *MockHTTP) Status() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockHTTPMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockHTTP)(nil).Status))
}

// Body mocks base method
func (m *MockHTTP) Body() (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Body indicates an expected call of Body
func (mr *MockHTTPMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockHTTP)(nil).Body))
}

// Exists mocks base method
func (m *MockHTTP) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockHTTPMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockHTTP)(nil).Exists))
}

// SetAllowInsecure mocks base method
func (m *MockHTTP) SetAllowInsecure(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAllowInsecure", arg0)
}

// SetAllowInsecure indicates an expected call of SetAllowInsecure
func (mr *MockHTTPMockRecorder) SetAllowInsecure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllowInsecure", reflect.TypeOf((*MockHTTP)(nil).SetAllowInsecure), arg0)
}

// SetNoFollowRedirects mocks base method
func (m *MockHTTP) SetNoFollowRedirects(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNoFollowRedirects", arg0)
}

// SetNoFollowRedirects indicates an expected call of SetNoFollowRedirects
func (mr *MockHTTPMockRecorder) SetNoFollowRedirects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoFollowRedirects", reflect.TypeOf((*MockHTTP)(nil).SetNoFollowRedirects), arg0)
}

// Headers mocks base method
func (m *MockHTTP) Headers() (system.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(system.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Headers indicates an expected call of Headers
func (mr *MockHTTPMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockHTTP)(nil).Headers))
}
